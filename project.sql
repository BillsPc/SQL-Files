SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS profmanagebox;
DROP TABLE IF EXISTS profmanageowning;
DROP TABLE IF EXISTS owns;
DROP TABLE IF EXISTS box;
DROP TABLE IF EXISTS pokemon;
DROP TABLE IF EXISTS trainers;
DROP TABLE IF EXISTS professors;
DROP TABLE IF EXISTS towns;
DROP TABLE IF EXISTS itemheld;
DROP TABLE IF EXISTS pokedex;
DROP TABLE IF EXISTS itemdex;
DROP TABLE IF EXISTS friends;
SET FOREIGN_KEY_CHECKS = 1;

CREATE TABLE Box (
boxNumber INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
boxName VARCHAR(40) NULL,
boxWallpaper VARCHAR(40) NULL
);

CREATE TABLE Pokedex (
dexNo INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
species VARCHAR(40) NOT NULL,
type VARCHAR(40) NOT NULL,
gender CHAR(2) NOT NULL,
CHECK (gender IN ('M', 'F', 'MF', 'U'))
);

CREATE TABLE Pokemon (
pokeID INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
pokeName VARCHAR(40) NOT NULL,
dexNo INT UNSIGNED NOT NULL,
level INT NOT NULL,
gender CHAR(1) NOT NULL,
FOREIGN KEY (dexNo) REFERENCES Pokedex(dexNo),
CHECK (gender LIKE (SELECT gender FROM Pokedex WHERE Pokedex.dexNo = Pokemon.dexNo LIMIT 1))
);

CREATE TABLE Towns(
townName VARCHAR(40) NOT NULL PRIMARY KEY,
region VARCHAR(40) NULL
);

CREATE TABLE Trainers(
trainerID INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
trainerName VARCHAR(40) NOT NULL,
townName VARCHAR(40) NOT NULL,
FOREIGN KEY (townName) REFERENCES Towns (townName)
);

CREATE TABLE Friends(
trainerID1 INT UNSIGNED NOT NULL,
trainerID2 INT UNSIGNED NOT NULL, FOREIGN KEY (trainerID1) REFERENCES Trainers(trainerID), FOREIGN KEY (trainerID2) REFERENCES Trainers(trainerID), PRIMARY KEY (trainerID1, trainerID2)
);

CREATE TABLE Professors(
profName VARCHAR(40) NOT NULL PRIMARY KEY,
townName VARCHAR(40) NOT NULL, FOREIGN KEY (townName) REFERENCES Towns (townName)
);

CREATE TABLE ItemDex(
itemID INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
itemName VARCHAR(40) NOT NULL,
description VARCHAR(40) NOT NULL
);

CREATE TABLE ItemHeld(
pokeID INT UNSIGNED NOT NULL,
itemID INT UNSIGNED NOT NULL,
FOREIGN KEY (pokeID) REFERENCES Pokemon (pokeID) ON DELETE CASCADE, FOREIGN KEY (itemID) REFERENCES ItemDex(itemID), PRIMARY KEY (pokeID, itemID)
);

CREATE TABLE Owns (
trainerID INT UNSIGNED NOT NULL,
pokeID INT UNSIGNED NOT NULL,
boxNumber INT UNSIGNED NOT NULL, PRIMARY KEY (trainerID, pokeID), FOREIGN KEY (trainerID) REFERENCES Trainers(trainerID), FOREIGN KEY (pokeID) REFERENCES Pokemon(pokeID), FOREIGN KEY (boxNumber) REFERENCES Box(boxNumber)
);

CREATE TABLE ProfManageBox (
profName VARCHAR(40) NOT NULL,
boxNumber INT UNSIGNED NOT NULL, PRIMARY KEY (profName, boxNumber), FOREIGN KEY (profName) REFERENCES Professors(profName), FOREIGN KEY (boxNumber) REFERENCES Box(boxNumber)
);

CREATE TABLE ProfManageOwning (
profName VARCHAR(40) NOT NULL,
trainerID INT UNSIGNED NOT NULL,
pokeID INT UNSIGNED NOT NULL,
boxNumber INT UNSIGNED NOT NULL, PRIMARY KEY (profName, trainerID, pokeID), FOREIGN KEY (profName) REFERENCES Professors(profName), FOREIGN KEY (trainerID) REFERENCES Trainers(trainerID), FOREIGN KEY (pokeID) REFERENCES Pokemon(pokeID), FOREIGN KEY (boxNumber) REFERENCES Box(boxNumber)
);